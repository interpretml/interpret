const myModule = require('../..');
const fetch = require('node-fetch');

const utils = require('./utils');

const unitTestAssert = utils.unitTestAssert;
const assert1dCloseTo = utils.assert1dCloseTo;

const name = 'on Iris';

let expected1 = [1.9, 1.9, 1.45, 1.325, 1.9,
  2.03333333, 1.325, 1.9, 1.325, 1.9,
  2.03333333, 1.58, 1.58, 1.1, 4.07142857,
  3.85, 2.03333333, 1.9, 3.85, 1.9,
  2.03333333, 1.9, 1.325, 1.9, 1.58,
  1.9, 1.9, 1.96, 1.96, 1.45,
  1.58, 2.03333333, 1.96, 3.22857143, 1.9,
  1.9, 3.22857143, 1.9, 1.325, 1.9,
  1.9, 1.325, 1.325, 1.9, 1.9,
  1.58, 1.9, 1.325, 1.96, 1.9,
  5.25625, 5.10869565, 5.25625, 3.22857143, 5.10869565,
  3.85, 5.10869565, 1.9, 5.10869565, 1.96,
  1.9, 4.66666667, 4.66666667, 4.75, 3.85,
  5.25625, 3.85, 4.07142857, 4.75, 3.85,
  4.66666667, 4.75, 5.10869565, 4.75, 5.10869565,
  5.10869565, 5.25625, 5.25625, 4.66666667, 3.85,
  3.22857143, 3.22857143, 4.07142857, 4.66666667, 2.03333333,
  4.66666667, 5.25625, 5.10869565, 3.85, 3.22857143,
  3.22857143, 4.75, 4.07142857, 1.9, 3.85,
  3.85, 3.85, 4.75, 1.9, 3.85,
  5.10869565, 4.07142857, 5.9, 5.10869565, 5.10869565,
  6.56666667, 1.9, 6.2, 5.25625, 5.96666667,
  5.10869565, 5.10869565, 5.25625, 3.85, 4.07142857,
  5.10869565, 5.10869565, 6.56666667, 6.56666667, 4.66666667,
  5.25625, 3.85, 6.56666667, 5.10869565, 5.25625,
  5.96666667, 4.75, 4.75, 5.10869565, 5.96666667,
  6.2, 6.56666667, 5.10869565, 5.10869565, 4.75,
  6.56666667, 5.10869565, 5.10869565, 4.66666667, 5.25625,
  5.25625, 5.25625, 4.07142857, 5.25625, 5.25625,
  5.25625, 5.10869565, 5.10869565, 4.75, 4.66666667];

let expected2 = [
  3.42916667, 3.42916667, 3.42916667, 3.42916667, 3.42916667,
  3.42916667, 3.42916667, 3.42916667, 3.42916667, 3.42916667,
  3.42916667, 3.42916667, 3.42916667, 3.42916667, 3.42916667,
  3.42916667, 3.42916667, 3.42916667, 3.42916667, 3.42916667,
  3.42916667, 3.42916667, 3.42916667, 3.4, 3.42916667,
  3.42916667, 3.42916667, 3.42916667, 3.42916667, 3.42916667,
  3.42916667, 3.42916667, 3.42916667, 3.42916667, 3.42916667,
  3.42916667, 3.42916667, 3.42916667, 3.42916667, 3.42916667,
  3.42916667, 3.42916667, 3.42916667, 3.4, 3.42916667,
  3.42916667, 3.42916667, 3.42916667, 3.42916667, 3.42916667,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872,
  2.872, 2.872, 2.872, 2.872, 2.872
];

let expected3 = [
  1.44166667, 1.44166667, 1.44166667, 1.44166667, 1.44166667,
  1.57142857, 1.44166667, 1.44166667, 1.44166667, 1.38,
  1.44166667, 1.44166667, 1.38, 1.38, 1.44166667,
  1.57142857, 1.57142857, 1.44166667, 1.44166667, 1.44166667,
  1.44166667, 1.57142857, 1.44166667, 1.65, 1.44166667,
  1.44166667, 1.57142857, 1.44166667, 1.44166667, 1.44166667,
  1.44166667, 1.57142857, 1.38, 1.44166667, 1.44166667,
  1.44166667, 1.44166667, 1.38, 1.44166667, 1.44166667,
  1.44166667, 1.44166667, 1.44166667, 1.65, 1.57142857,
  1.44166667, 1.44166667, 1.44166667, 1.44166667, 1.44166667,
  4.6375, 4.65833333, 4.65833333, 4.19444444, 4.65833333,
  4.19444444, 4.93333333, 3.61, 4.19444444, 4.6375,
  3.61, 4.65833333, 3.61, 4.6375, 4.19444444,
  4.6375, 4.65833333, 3.61, 4.65833333, 3.61,
  5.32941176, 4.19444444, 4.65833333, 4.19444444, 4.19444444,
  4.6375, 4.6375, 4.93333333, 4.65833333, 3.61,
  3.61, 3.61, 4.19444444, 4.93333333, 4.65833333,
  4.93333333, 4.65833333, 4.19444444, 4.19444444, 4.19444444,
  4.19444444, 4.6375, 4.19444444, 3.61, 4.19444444,
  4.19444444, 4.19444444, 4.19444444, 3.61, 4.19444444,
  5.93333333, 5.32941176, 5.735, 5.32941176, 5.735,
  5.735, 4.93333333, 5.32941176, 5.32941176, 5.93333333,
  5.55, 5.32941176, 5.735, 5.55, 5.735,
  5.735, 5.32941176, 5.735, 5.735, 4.65833333,
  5.735, 5.55, 5.55, 5.32941176, 5.735,
  5.32941176, 5.32941176, 5.32941176, 5.735, 4.93333333,
  5.32941176, 5.55, 5.735, 4.65833333, 4.6375,
  5.735, 5.735, 5.32941176, 5.32941176, 5.735,
  5.735, 5.735, 5.32941176, 5.735, 5.93333333,
  5.735, 5.32941176, 5.55, 5.735, 5.32941176
];

let model = null;

console.log(`\n--- Start testing ${name} ---`);


const testIris = async () => {
  let url = 'https://gist.githubusercontent.com/xiaohk/b5b44e0963247b90d7e9a8e1272efa78/raw/d81dbc0ca7631b8fd1d35bb5651b2d87c2eea337/iris.json';
  let setting = { method: 'Get' };

  let res = await fetch(url, setting);
  let json = await res.json();

  model = new myModule.IsotonicRegression();
  model.fit(json.sepalLength, json.petalLength);

  unitTestAssert(
    'iris dataset [sepalLength => petalLength]',
    () => model.predict(json.sepalLength),
    expected1,
    (e, r) => assert1dCloseTo(e, r, 1e-6)
  );

  model = new myModule.IsotonicRegression({increasing: false});
  model.fit(json.petalWidth, json.sepalWidth);

  unitTestAssert(
    'iris dataset [petalWidth => sepalWidth, decreasing]',
    () => model.predict(json.petalWidth),
    expected2,
    (e, r) => assert1dCloseTo(e, r, 1e-6)
  );

  model = new myModule.IsotonicRegression();
  model.fit(json.petalWidth, json.petalLength);

  unitTestAssert(
    'iris dataset [petalWidth => petalLength]',
    () => model.predict(json.petalWidth),
    expected3,
    (e, r) => assert1dCloseTo(e, r, 1e-6)
  );

};

module.exports = {
  testIris
};


