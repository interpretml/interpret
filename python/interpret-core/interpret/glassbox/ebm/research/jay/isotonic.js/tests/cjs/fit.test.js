const myModule = require('../..');

const utils = require('./utils');

const unitTestAssert = utils.unitTestAssert;
const assert2dCloseTo = utils.assert2dCloseTo;
const assert1dCloseTo = utils.assert1dCloseTo;

const name = 'fit';
let x = null;
let y = null;
let w = null;
let expectedXT = null;
let expectedYT = null;
let model = null;

console.log(`\n--- Start testing ${name} ---`);

// Short random array

x = [3.75, 3.75, 6.419, 6.419, 6.506, 6.506, 40.372, 40.372,
  57.366, 57.366];

y = [37.301, 34.471, 26.75, 15.98, 34.205, 22.579, 42.555, 51.808,
  84.971, 67.417];

w = [0.894, 1.202, 0.893, 0.505, 0.803, 0.934, 0.568, 0.834, 1.98,
  1.291];

expectedXT = [3.75, 6.506, 40.372, 57.366];
expectedYT = [29.68730396, 29.68730396, 48.05928103, 78.04277805];

unitTestAssert(
  'fit [random short array]',
  () => {
    model = new myModule.IsotonicRegression();
    model.fit(x, y, w);
    return [model.xThresholds, model.yThresholds];
  },
  [expectedXT, expectedYT],
  (e, r) => assert2dCloseTo(e, r, 1e-6)
);

// Long random array

x = [6.073, 6.073, 7.77, 7.77, 21.368, 21.368, 23.502, 23.502,
  24.132, 24.132, 28.269, 28.269, 31.638, 31.638, 38.492, 38.492,
  40.101, 40.101, 44.926, 44.926, 45.417, 45.417, 54.947, 54.947,
  57.193, 57.193, 58.679, 58.679, 62.618, 62.618, 67.48, 67.48,
  80.417, 80.417, 81.77, 81.77, 90.214, 90.214, 92.689, 92.689];

y = [36.274, 30.103, 29.16, 28.238, 42.226, 48.144, 33.718,
  47.98, 30.232, 53.802, 59.72, 44.461, 58.928, 45.682,
  41.393, 65.096, 46.826, 44.682, 58.089, 73.133, 74.739,
  52.219, 66.761, 64.572, 81.127, 67.052, 71.601, 65.997,
  88.743, 78.978, 78.129, 89.057, 74.673, 81.686, 94.682,
  86.424, 98.768, 88.086, 94.725, 106.711];

w = [1.302, 1.7, 0.847, 1.376, 1.13, 1.681, 0.648, 0.896, 1.598,
  1.382, 1.577, 1.821, 1.974, 0.679, 1.866, 1.696, 0.664, 1.088,
  0.901, 1.62, 0.619, 0.881, 0.868, 1.699, 1.664, 1.791, 0.598,
  0.882, 0.985, 0.64, 1.554, 0.812, 1.197, 1.768, 0.924, 1.856,
  0.896, 0.821, 0.638, 1.654];

expectedXT = [6.073, 7.77, 21.368, 24.132, 28.269, 31.638, 40.101, 44.926,
  54.947, 57.193, 58.679, 62.618, 80.417, 81.77, 90.214, 92.689];

expectedYT = [30.99671885, 30.99671885, 43.10155256, 43.10155256,
  51.54264891, 52.05103351, 52.05103351, 65.38227155,
  65.38227155, 72.16052928, 72.16052928, 81.29513427,
  81.29513427, 89.16874532, 93.66029936, 103.3745829];

unitTestAssert(
  'fit [random long array]',
  () => {
    model = new myModule.IsotonicRegression();
    model.fit(x, y, w);
    return [model.xThresholds, model.yThresholds];
  },
  [expectedXT, expectedYT],
  (e, r) => assert2dCloseTo(e, r, 1e-6)
);

// Test xMin and xMax

unitTestAssert(
  'fit [xMin and xMax]',
  () => {
    model = new myModule.IsotonicRegression();
    model.fit(x, y, w);
    return [model.xMin, model.xMax];
  },
  [6.073, 92.689],
  (e, r) => assert1dCloseTo(e, r, 1e-6)
);

// Decreasing isotonic regression with a short array

x = [31.139, 31.139, 39.226, 39.226, 49.824, 49.824, 72.009, 72.009,
  91.484, 91.484];

y = [55.688, 78.733, 74.001, 78.556, 44.845, 61.047, 32.644, 46.644,
  34.043, 35.677];

w = [0.824, 0.708, 1.08, 1.761, 0.804, 0.963, 1.327, 0.67, 0.827,
  0.509];

expectedXT = [31.139, 39.226, 49.824, 72.009, 91.484];

expectedYT = [73.15071393, 73.15071393, 53.67495246, 37.34104557, 34.66553443];

unitTestAssert(
  'fit [decreasing regression with a short array]',
  () => {
    model = new myModule.IsotonicRegression({increasing: false});
    model.fit(x, y, w);
    return [model.xThresholds, model.yThresholds];
  },
  [expectedXT, expectedYT],
  (e, r) => assert2dCloseTo(e, r, 1e-6)
);

// Decreasing isotonic regression with a long array

x = [3.661, 3.661, 7.076, 7.076, 7.54, 7.54, 8.745, 8.745,
  33.923, 33.923, 34.753, 34.753, 39.036, 39.036, 39.993, 39.993,
  43.937, 43.937, 54.061, 54.061, 60.549, 60.549, 71.386, 71.386,
  75.981, 75.981, 82.341, 82.341, 82.726, 82.726, 85.068, 85.068,
  89.994, 89.994, 92.022, 92.022, 95.293, 95.293, 97.249, 97.249];

y = [84.065, 81.43, 103.409, 87.398, 84.942, 82.554, 93.982,
  94.288, 62.1, 75.601, 70.19, 62.343, 69.123, 75.561,
  57.265, 76.424, 45.991, 64.786, 59.802, 65.071, 42.818,
  34.862, 39.192, 25.374, 48.822, 32.867, 14.983, 43.226,
  40.129, 26.431, 29.198, 30.979, 15.029, 35.078, 31.002,
  10.916, 4.56, 33.736, 29.22, 31.606];

w = [1.894, 1.08, 1.189, 0.644, 1.315, 1.136, 1.24, 1.459, 0.53,
  1.824, 1.652, 1.527, 1.445, 1.246, 1.811, 0.736, 1.002, 0.889,
  1.932, 0.536, 0.687, 1.647, 1.282, 1.949, 0.694, 0.531, 1.128,
  1.387, 0.835, 1.353, 1.112, 1.266, 1.833, 1.096, 1.975, 1.063,
  0.503, 1.803, 1.61, 1.3];

expectedXT = [3.661, 8.745, 33.923, 34.753, 39.036, 39.993, 43.937, 54.061,
  60.549, 71.386, 75.981, 82.341, 82.726, 85.068, 89.994, 97.249];

expectedYT = [88.98112574, 88.98112574, 72.56126763, 69.02612981, 69.02612981,
  62.80132666, 58.29163937, 58.29163937, 37.20380463, 33.89428075,
  33.89428075, 31.07041123, 31.07041123, 30.14616905, 25.93919261,
  25.93919261];

unitTestAssert(
  'fit [decreasing regression with a long array]',
  () => {
    model = new myModule.IsotonicRegression({increasing: false});
    model.fit(x, y, w);
    return [model.xThresholds, model.yThresholds];
  },
  [expectedXT, expectedYT],
  (e, r) => assert2dCloseTo(e, r, 1e-6)
);

// No sample weights

x = [4.005, 4.005, 6.542, 6.542, 10.757, 10.757, 16.858, 16.858,
  21.111, 21.111, 25.305, 25.305, 25.386, 25.386, 27.986, 27.986,
  28.799, 28.799, 29.366, 29.366, 36.29, 36.29, 37.027, 37.027,
  48.501, 48.501, 48.714, 48.714, 49.885, 49.885, 65.31, 65.31,
  71.254, 71.254, 89.936, 89.936, 96.684, 96.684, 97.109, 97.109];

y = [108.622, 109.112, 99.112, 106.735, 90.492, 106.092, 93.819,
  106.418, 120.122, 125.026, 103.212, 123.601, 112.96, 111.336,
  106.287, 102.145, 126.208, 107.273, 104.694, 114.764, 117.447,
  125.804, 126.838, 110.842, 135.945, 132.597, 125.662, 138.586,
  127.081, 120.73, 152.777, 151.169, 136.165, 148.294, 177.644,
  167.296, 180.598, 155.89, 184.644, 159.204];

expectedXT = [4.005, 16.858, 21.111, 27.986, 28.799, 29.366, 36.29, 37.027,
  48.501, 49.885, 65.31, 71.254, 89.936, 96.684, 97.109];

expectedYT = [102.55025, 102.55025, 113.086125, 113.086125,
  113.23475, 113.23475, 120.23275, 120.23275,
  130.10016667, 130.10016667, 147.10125, 147.10125,
  170.357, 170.357, 171.924];

unitTestAssert(
  'fit [no sample weights]',
  () => {
    model = new myModule.IsotonicRegression();
    model.fit(x, y);
    return [model.xThresholds, model.yThresholds];
  },
  [expectedXT, expectedYT],
  (e, r) => assert2dCloseTo(e, r, 1e-6)
);


